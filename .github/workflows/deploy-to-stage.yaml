name: Deploy to Stage

on:
  workflow_dispatch:
    inputs:
      staging_artifact_version:
        description: 'The version of the artifact that was build.'
        required: true

jobs:
  promote_to_production:
    if: github.actor == 'leegin' || github.actor == 'Leegin-darknight'
    runs-on: [self-hosted, Linux, X64, nbt-runner]

    steps:
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven


      # Use the same commit ID as the version for the production deployment
      - name: Deploy to staging
        run: |
          
          ARTIFACT=${{ inputs.staging_artifact_version }}
          APP_WITHOUT_PARENT="${ARTIFACT%-parent*}"
          SERVICE_NAME="${APP_WITHOUT_PARENT%-adapter*}"

          # Replace '/path/to/yourjar/target' with the path to your production JAR file on the VM
          echo "Workflow triggered by: ${{ github.actor }}"

          # scp the jar to the remote vm in PROD Environment

          sshpass -p "${{ secrets.STAGE_SSH_PASSWORD }}" sudo scp -P 20202 adapters/*/*/target/${{ inputs.staging_artifact_version }} ${{ secrets.STAGE_SSH_USERNAME }}@${{ secrets.STAGE_VM_HOST }}:/opt/github-action-maven-adapter/

          #Trigger the service restart
          echo "Restarting the service ${SERVICE_NAME}-server"
          sshpass -p "${{ secrets.STAGE_SSH_PASSWORD }}" ssh -p 20202 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.STAGE_SSH_USERNAME }}@${{ secrets.STAGE_VM_HOST }} "sudo systemctl restart ${SERVICE_NAME}-server.service"

          #Check if the service is running or not.
          if sshpass -p "${{ secrets.STAGE_SSH_PASSWORD }}" ssh -p 20202 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.STAGE_SSH_USERNAME }}@${{ secrets.STAGE_VM_HOST }} "pgrep -f $ARTIFACT"; then
            echo "Service ${SERVICE_NAME}-server is running."
          else
            echo "Service ${SERVICE_NAME}-server is not running."
            exit 1
          fi