name: Deploy to Stage

on:
  workflow_dispatch:
    inputs:
      staging_artifact_version:
        description: 'The version of the artifact that was build.'
        required: true

jobs:
  promote_to_production:
    if: github.actor == 'leegin' || github.actor == 'Leegin-darknight'
    runs-on: [self-hosted, Linux, X64, nbt-runner]

    steps:
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Decrypt Secrets
        run: |
          sops --decrypt adapters/secrets_enc.yaml  | sed '/#ENC/d' > secrets.yaml
          


      # Use the same commit ID as the version for the production deployment
      - name: Deploy to staging
        run: |
          eval $(awk -F': ' '{print "export " $1"="$2}' secrets.yaml)
          ARTIFACT=${{ inputs.staging_artifact_version }}
          APP_WITHOUT_PARENT="${ARTIFACT%-parent*}"
          SERVICE_NAME="${APP_WITHOUT_PARENT%-adapter*}"

          echo "${STAGE_VM_HOST}"
          echo "${STAGE_SSH_USERNAME}"

          # Replace '/path/to/yourjar/target' with the path to your production JAR file on the VM
          echo "Workflow triggered by: ${{ github.actor }}"

          # Update the password in application.yml
          ssh -p 20202 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${STAGE_SSH_USERNAME}@${STAGE_VM_HOST} "sed -i \"/password/c\  password: '${STAGE_NEW_ADAPTER}'\" /opt/github-action-maven-adapter/application.yml"

          # scp the jar to the remote vm in PROD Environment

          echo "Running ssh 1"
          sudo scp -P 20202 adapters/*/*/target/${{ inputs.staging_artifact_version }} ${STAGE_SSH_USERNAME}@${STAGE_VM_HOST}:/opt/github-action-maven-adapter/

          #Trigger the service restart
          echo "Restarting the service ${SERVICE_NAME}-server"
          ssh -p 20202 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${STAGE_SSH_USERNAME}@${STAGE_VM_HOST} "sudo -S systemctl restart ${SERVICE_NAME}-server"

          #Check if the service is running or not.
          echo "Running ssh 2"
          if ssh -p 20202 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${STAGE_SSH_USERNAME}@${STAGE_VM_HOST} "pgrep -f $ARTIFACT"; then
            echo "Service ${SERVICE_NAME}-server is running."
          else
            echo "Service ${SERVICE_NAME}-server is not running."
            exit 1
          fi