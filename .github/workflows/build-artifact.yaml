name: Build and Deploy to Staging

on:
  push:
    branches:
      - main  # Adjust this to match your main branch name
    paths:
      - 'adapters/*-adapter/*-server/**'  # Watch for changes in the "adapter" folder and its subdirectories

jobs:
  build_and_deploy:
    runs-on: [self-hosted, Linux, X64, nbt-runner]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.4

      - name: Determine Changed Applications
        id: determine_changed_apps
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^adapters/')
          if [ -n "$changed_files" ]; then
            # Extract unique -adapter/-server subdirectories from the changed paths
            echo "$changed_files" | grep -oE 'adapters/[^/]+/[^/]+/' | uniq  > changed_files.txt
          else
            echo "No applications with changes. Exiting the workflow."
            exit 0
          fi

      # Get the Git commit ID and use it as the version
      - name: Get Git commit ID
        id: get_commit_id
        run: echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Rename the JAR with the commit ID as the version
      # Replace 'your-app.jar' with the actual JAR file name
      # Replace 'target' with the path to your JAR file's parent directory
      - name: Set Apps Environment Variable
        run: echo "APPS=${{ env.APPS }}" >> $GITHUB_ENV

      - name: Build and Deploy Adapter Apps
        run: |
          for app_name in $(cat changed_files.txt); do
            echo "Building and deploying $app_name..."

            cd $app_name

            # Adjust the build command as per your build system (e.g., for Maven)
            mvn clean install -am

            APP_WITHOUT_PARENT=$(echo $app_name | cut -d'/' -f2)        

            mv target/"${APP_WITHOUT_PARENT}-parent-1.0.0-SNAPSHOT.jar" target/"${APP_WITHOUT_PARENT}-parent-$COMMIT_ID-1.0.0-SNAPSHOT.jar"

            echo "The built artifact is ${APP_WITHOUT_PARENT}-parent-$COMMIT_ID-1.0.0-SNAPSHOT.jar"
            # # scp the jar to the remote vm in staging Environment
            # sshpass -p "${{ secrets.STAGE_SSH_PASSWORD }}" sudo scp -P 20202 target/"${APP_WITHOUT_PARENT}-parent-${COMMIT_ID}-1.0.0-SNAPSHOT.jar" ${{ secrets.STAGE_SSH_USERNAME }}@${{ secrets.STAGE_VM_HOST }}:/opt/github-action-maven-adapter/
            
            # #Trigger the service restart
            # sshpass -p "${{ secrets.STAGE_SSH_PASSWORD }}" ssh -p 20202 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.STAGE_SSH_USERNAME }}@${{ secrets.STAGE_VM_HOST }} "/opt/${APP_WITHOUT_PARENT}-server-startup.sh"

            # #Check if the service is running or not.
            # SERVICE_NAME="${APP_WITHOUT_PARENT}-parent-$COMMIT_ID-1.0.0-SNAPSHOT.jar"
            # if sshpass -p "${{ secrets.STAGE_SSH_PASSWORD }}" ssh -p 20202 -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.STAGE_SSH_USERNAME }}@${{ secrets.STAGE_VM_HOST }} "pgrep -f $SERVICE_NAME"; then
            #   echo "Service $SERVICE_NAME is running."
            # else
            #   echo "Service $SERVICE_NAME is not running."
            #   exit 1
            # fi
            cd ../../..
          done

